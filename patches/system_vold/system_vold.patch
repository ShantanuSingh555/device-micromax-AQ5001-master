From e9d47e69281b5232472edc6510b1006312d2e1fe Mon Sep 17 00:00:00 2001
From: dee3000 <dee3000@bk.ru>
Date: Tue, 24 May 2016 23:14:15 +0300
Subject: [PATCH] fissssss

---
 Android.mk          |  2 +-
 CommandListener.cpp |  2 +-
 DirectVolume.cpp    | 15 +++++++++++----
 Volume.cpp          | 12 ++++++++++++
 4 files changed, 25 insertions(+), 6 deletions(-)

diff --git a/Android.mk b/Android.mk
index efea536..1cd3b34 100644
--- a/Android.mk
+++ b/Android.mk
@@ -1,6 +1,6 @@
 LOCAL_PATH:= $(call my-dir)
 
-common_cflags := -Werror -Wno-unused-parameter
+common_cflags := -Werror -Wno-unused-parameter -DPARTITION_DEBUG
 
 common_src_files := \
 	VolumeManager.cpp \
diff --git a/CommandListener.cpp b/CommandListener.cpp
index 6d19fd5..6fbfb5b 100644
--- a/CommandListener.cpp
+++ b/CommandListener.cpp
@@ -42,7 +42,7 @@
 #include "cryptfs.h"
 #include "fstrim.h"
 
-#define DUMP_ARGS 0
+#define DUMP_ARGS 1
 
 CommandListener::CommandListener() :
                  FrameworkListener("vold", true) {
diff --git a/DirectVolume.cpp b/DirectVolume.cpp
index 8d4a650..e4bb03c 100644
--- a/DirectVolume.cpp
+++ b/DirectVolume.cpp
@@ -222,7 +222,7 @@ int DirectVolume::handleBlockEvent(NetlinkEvent *evt) {
     return -1;
 }
 
-void DirectVolume::handleDiskAdded(const char * /*devpath*/,
+void DirectVolume::handleDiskAdded(const char *devpath,
                                    NetlinkEvent *evt) {
     mDiskMajor = atoi(evt->findParam("MAJOR"));
     mDiskMinor = atoi(evt->findParam("MINOR"));
@@ -235,16 +235,23 @@ void DirectVolume::handleDiskAdded(const char * /*devpath*/,
         mDiskNumParts = 1;
     }
 
+#ifdef MTK_HARDWARE
+	if (strstr(devpath, "mmcblk0boot") || strstr(devpath, "mmcblk0rpmb")) {
+		SLOGD("ignoring MTK raw partition %s", devpath);
+		return;
+	}
+#endif
+
     mPendingPartCount = mDiskNumParts;
 
     if (mDiskNumParts == 0) {
 #ifdef PARTITION_DEBUG
-        SLOGD("Dv::diskIns - No partitions - good to go son!");
+        SLOGD("Dv::diskIns - No partitions - good to go son! (devpath=%s, mountpoint=%s)", devpath, mMountpoint);
 #endif
         setState(Volume::State_Idle);
     } else {
 #ifdef PARTITION_DEBUG
-        SLOGD("Dv::diskIns - waiting for %d pending partitions", mPendingPartCount);
+        SLOGD("Dv::diskIns - waiting for %d pending partitions (devpath=%s, mountpoint=%s)", mPendingPartCount, devpath, mMountpoint);
 #endif
         setState(Volume::State_Pending);
     }
@@ -265,7 +272,7 @@ void DirectVolume::handlePartitionAdded(const char *devpath, NetlinkEvent *evt)
         part_num = 1;
     }
 
-    SLOGD("DirectVolume::handlePartitionAdded -> MAJOR %d, MINOR %d, PARTN %d\n", major, minor, part_num);
+    SLOGD("DirectVolume::handlePartitionAdded -> MAJOR %d, MINOR %d, PARTN %d (mountpoint=%s)\n", major, minor, part_num, mMountpoint);
 
     if (part_num > MAX_PARTITIONS || part_num < 1) {
         SLOGE("Invalid 'PARTN' value");
diff --git a/Volume.cpp b/Volume.cpp
index a2db960..bcedf9b 100644
--- a/Volume.cpp
+++ b/Volume.cpp
@@ -377,14 +377,20 @@ int Volume::mountVol() {
     char crypto_state[PROPERTY_VALUE_MAX];
     char encrypt_progress[PROPERTY_VALUE_MAX];
 
+	SLOGD("mountVol: hello (label=%s)", getLabel());
+
     property_get("vold.decrypt", decrypt_state, "");
     property_get("vold.encrypt_progress", encrypt_progress, "");
+	SLOGD("vold.decrypt = %s", decrypt_state);
+	SLOGD("vold.encrypt_progress = %s", encrypt_progress);
+	SLOGD("getState() = %d (%s)", getState(), stateToStr(getState()));
 
     /* Don't try to mount the volumes if we have not yet entered the disk password
      * or are in the process of encrypting.
      */
     if ((getState() == Volume::State_NoMedia) ||
         ((!strcmp(decrypt_state, "1") || encrypt_progress[0]) && providesAsec)) {
+		SLOGD("mountVol: early bail 1");
         snprintf(errmsg, sizeof(errmsg),
                  "Volume %s %s mount failed - no media",
                  getLabel(), getFuseMountpoint());
@@ -394,8 +400,10 @@ int Volume::mountVol() {
         errno = ENODEV;
         return -1;
     } else if (getState() != Volume::State_Idle) {
+		SLOGD("mountVol: early bail 2: getState() == %d", getState());
         errno = EBUSY;
         if (getState() == Volume::State_Pending) {
+			SLOGD("mountVol: will retry");
             mRetryMount = true;
         }
         return -1;
@@ -408,6 +416,8 @@ int Volume::mountVol() {
         return 0;
     }
 
+	SLOGD("mountVol: so far so good...");
+
     n = getDeviceNodes((dev_t *) &deviceNodes, 4);
     if (!n) {
         SLOGE("Failed to get device nodes (%s)\n", strerror(errno));
@@ -463,6 +473,8 @@ int Volume::mountVol() {
         }
     }
 
+	SLOGD("mountVol: nice...");
+
     for (i = 0; i < n; i++) {
         char devicePath[255];
         char *fstype = NULL;
-- 
1.9.1

